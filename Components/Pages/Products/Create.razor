@page "/products/create"
@inject ApplicationDbContext Context
@inject NavigationManager Navigation
@attribute [Authorize]

@rendermode InteractiveServer

<h1 class="h3 fw-semibold mb-4 text-dark border-bottom pb-2">Create Product</h1>

<EditForm Model="@Model" OnValidSubmit="@OnvalidSubmitAsync">
    <DataAnnotationsValidator/>
    
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText @bind-Value="Model.Title" class="form-control"/>
        <ValidationMessage For="@(() => Model.Title)" class="text-danger"/>
    </div>
    
    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputText @bind-Value="Model.Description" class="form-control"/>
        <ValidationMessage For="@(() => Model.Description)" class="text-danger"/>
    </div>
    
    <div class="mb-3">
        <label class="form-label">Price</label>
        <InputNumber @bind-Value="Model.Price" class="form-control"/>
        <ValidationMessage For="@(() => Model.Price)" class="text-danger"/>
    </div>
    
    <div class="mb-3">
        <label class="form-label">Category</label>
        <InputSelect @bind-Value="Model.CategoryId" class="form-control">
            @foreach (var category in Categories)
            {
                <option value="@category.Id">@category.Title</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code
{
    public Product Model { get; set; } = new();
    private IEnumerable<Category> Categories { get; set; } = [];
    

    protected override async Task OnInitializedAsync()
    {
        Categories = await Context
            .Categories
            .AsNoTracking()
            .OrderBy(x => x.Title)
            .ToListAsync();
    }

    private async Task OnvalidSubmitAsync()
    {
        try
        {
            await Context.Products.AddAsync(Model);
            await Context.SaveChangesAsync();
            Navigation.NavigateTo("products");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw;
        }
    }
}
